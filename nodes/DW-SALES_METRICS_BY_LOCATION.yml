fileVersion: 1
id: 8ce2d9df-b775-4a02-9885-37c61c083c7d
name: SALES_METRICS_BY_LOCATION
operation:
  config:
    dfcmd: |2
          locations_df = snowpark_session.table("CROOD_DEV.TASTY_BYTES_DEMO.STG_LOCATION")
          trucks_df = snowpark_session.table("CROOD_DEV.TASTY_BYTES_DEMO.STG_TRUCK")
          orders_df = snowpark_session.table("CROOD_DEV.TASTY_BYTES_DEMO.ORDERS")
          # Join locations with trucks to get truck counts by location
          location_trucks = (
              trucks_df
              .join(
                  locations_df, 
                  trucks_df["PRIMARY_CITY"] == locations_df["CITY"], 
                  "inner"
              )
              # Use simple column names and case-insensitive approach
              .select(
                  locations_df["LOCATION_ID"],
                  locations_df["LOCATION"],
                  locations_df["CITY"],
                  trucks_df["TRUCK_ID"]
              )
              .groupBy("LOCATION_ID", "LOCATION", "CITY")
              .agg(count("TRUCK_ID").alias("TRUCK_COUNT"))
          )

          # Join with order data to get sales metrics
          location_metrics = (
              orders_df
              .join(locations_df, "LOCATION_ID", "inner")
              .groupBy("LOCATION_ID")
              .agg(
                  sum_("ORDER_TOTAL").alias("TOTAL_SALES"),
                  sum_("ORDER_AMOUNT").alias("TOTAL_AMOUNT"),
                  sum_("ORDER_TAX_AMOUNT").alias("TOTAL_TAX")
              )
          )

          # Create a more simplified final version
          joined_df = location_trucks.join(location_metrics, "LOCATION_ID", "left")

          # Add the calculated columns after join to avoid column reference issues
          final_df = (
              joined_df
              .select(
                  col("LOCATION_ID"),
                  col("LOCATION"),
                  col("CITY"),
                  col("TRUCK_COUNT"),
                  # Use coalesce instead of fillna for Column objects
                  coalesce(col("TOTAL_SALES"), lit(0)).alias("TOTAL_SALES"),
                  coalesce(col("TOTAL_AMOUNT"), lit(0)).alias("TOTAL_AMOUNT"),
                  coalesce(col("TOTAL_TAX"), lit(0)).alias("TOTAL_TAX")
              )
          )

          # Add the full location description as a separate step
          final_with_desc = (
              final_df
              .withColumn(
                  "LOCATION_DESCRIPTION", 
                  concat(
                      col("CITY"), 
                      lit(" (Trucks: "), 
                      col("TRUCK_COUNT").cast("string"), 
                      lit(")")
                  )
              )
          )
          df_final = final_with_desc
    pyLib: from snowflake.snowpark.functions import col,lit,concat,count,sum as sum_,coalesce
    writeMode: overwrite
  database: ""
  deployEnabled: true
  description: ""
  isMultisource: false
  locationName: DW
  materializationType: table
  metadata:
    appliedNodeTests: []
    columns:
      - acceptedValues:
          strictMatch: true
          values: []
        appliedColumnTests: {}
        columnReference:
          columnCounter: cd08b970-8df4-433f-9522-f16410c30e22
          stepCounter: 8ce2d9df-b775-4a02-9885-37c61c083c7d
        config: {}
        dataType: VARCHAR(16777216)
        defaultValue: ""
        description: ""
        name: LOCATION
        nullable: true
        primaryKey: false
        sourceColumnReferences:
          - columnReferences: []
            transform: ""
        transform: ""
        uniqueKey: false
      - acceptedValues:
          strictMatch: true
          values: []
        appliedColumnTests: {}
        columnReference:
          columnCounter: 87500353-e3e3-4b67-92f0-98727bf44b8e
          stepCounter: 8ce2d9df-b775-4a02-9885-37c61c083c7d
        config: {}
        dataType: VARCHAR(16777216)
        defaultValue: ""
        description: ""
        name: CITY
        nullable: true
        primaryKey: false
        sourceColumnReferences:
          - columnReferences: []
            transform: ""
        transform: ""
        uniqueKey: false
      - acceptedValues:
          strictMatch: true
          values: []
        appliedColumnTests: {}
        columnReference:
          columnCounter: 8742e65d-8968-4d5a-ad5b-fef2562cd9d2
          stepCounter: 8ce2d9df-b775-4a02-9885-37c61c083c7d
        config: {}
        dataType: NUMBER(38,0)
        defaultValue: ""
        description: ""
        name: TRUCK_COUNT
        nullable: false
        primaryKey: false
        sourceColumnReferences:
          - columnReferences: []
            transform: ""
        transform: ""
        uniqueKey: false
      - acceptedValues:
          strictMatch: true
          values: []
        appliedColumnTests: {}
        columnReference:
          columnCounter: bc436e03-f586-48b6-aac1-6116d2b93e92
          stepCounter: 8ce2d9df-b775-4a02-9885-37c61c083c7d
        config: {}
        dataType: NUMBER(38,4)
        defaultValue: ""
        description: ""
        name: TOTAL_SALES
        nullable: false
        primaryKey: false
        sourceColumnReferences:
          - columnReferences: []
            transform: ""
        transform: ""
        uniqueKey: false
      - acceptedValues:
          strictMatch: true
          values: []
        appliedColumnTests: {}
        columnReference:
          columnCounter: 394cdc68-c887-455a-b0f8-9a3510f248b7
          stepCounter: 8ce2d9df-b775-4a02-9885-37c61c083c7d
        config: {}
        dataType: NUMBER(38,4)
        defaultValue: ""
        description: ""
        name: TOTAL_AMOUNT
        nullable: false
        primaryKey: false
        sourceColumnReferences:
          - columnReferences: []
            transform: ""
        transform: ""
        uniqueKey: false
      - acceptedValues:
          strictMatch: true
          values: []
        appliedColumnTests: {}
        columnReference:
          columnCounter: 2c0111c3-9a4f-47fc-b6a8-5327e29b4589
          stepCounter: 8ce2d9df-b775-4a02-9885-37c61c083c7d
        config: {}
        dataType: FLOAT
        defaultValue: ""
        description: ""
        name: TOTAL_TAX
        nullable: false
        primaryKey: false
        sourceColumnReferences:
          - columnReferences: []
            transform: ""
        transform: ""
        uniqueKey: false
      - acceptedValues:
          strictMatch: true
          values: []
        appliedColumnTests: {}
        columnReference:
          columnCounter: 9557c49d-c903-4e7a-8f87-948f558b7ca1
          stepCounter: 8ce2d9df-b775-4a02-9885-37c61c083c7d
        config: {}
        dataType: VARCHAR(16777216)
        defaultValue: ""
        description: ""
        name: LOCATION_DESCRIPTION
        nullable: true
        primaryKey: false
        sourceColumnReferences:
          - columnReferences: []
            transform: ""
        transform: ""
        uniqueKey: false
      - acceptedValues:
          strictMatch: true
          values: []
        appliedColumnTests: {}
        columnReference:
          columnCounter: ecdb0964-54ab-4a45-88c8-0b0c55d0208f
          stepCounter: 8ce2d9df-b775-4a02-9885-37c61c083c7d
        config: {}
        dataType: NUMBER(38,0)
        defaultValue: ""
        description: ""
        name: LOCATION_ID
        nullable: true
        primaryKey: false
        sourceColumnReferences:
          - columnReferences: []
            transform: ""
        transform: ""
        uniqueKey: false
    cteString: ""
    enabledColumnTestIDs: []
    sourceMapping:
      - aliases: {}
        customSQL:
          customSQL: ""
        dependencies:
          - locationName: DW
            nodeName: ORDERS
          - locationName: DW
            nodeName: STG_LOCATION
          - locationName: DW
            nodeName: STG_TRUCK
        join:
          joinCondition: |-
            FROM {{ ref('DW', 'STG_LOCATION') }} "STG_LOCATION"
            INNER JOIN {{ ref('DW', 'STG_TRUCK') }} "STG_TRUCK"
            ON "STG_LOCATION"./*COLUMN*/ = "STG_TRUCK"./*COLUMN*/
            INNER JOIN {{ ref('DW', 'ORDERS') }} "ORDERS"
            ON "STG_LOCATION"./*COLUMN*/ = "ORDERS"./*COLUMN*/
        name: SALES_METRICS_BY_LOCATION
        noLinkRefs: []
  name: SALES_METRICS_BY_LOCATION
  overrideSQL: false
  schema: ""
  sqlType: "5"
  type: sql
  version: 1
type: Node
