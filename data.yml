defaultStorageMapping: DW
installedPackages: {}
jobs:
  Job-2:
    excludeSelector: ""
    id: 2
    includeSelector: "+{ location: DW name: DIM_CUSTOMER } OR +{ location: DW name: FCT_ORDERS_LINEITEM }"
    name: Refresh BI Star Schema
    steps: []
    subgraphs: []
locations:
  3RD_PARTY_DATA:
    mappingDefinitions:
      "22":
        database: CROOD_DEV
        schema: WEATHER
      "23":
        database: CROOD_QA
        schema: WEATHER
  DW:
    mappingDefinitions:
      "22":
        database: CROOD_DEV
        schema: SOURCE_DATA
      "23":
        database: CROOD_QA
        schema: SOURCE_DATA
macros:
  Macro-1:
    id: "1"
    macroString: |-
      {% macro snake_case(column)%}
        {{(column.name[0]|upper + column.name[1:]|replace('A','_A')|replace('B','_B')|replace('C','_C')|replace('D','_D')|replace('E','_E')|replace('F','_F')|replace('G','_G')|replace('H','_H')|replace('I','_I')|replace('J','_J')|replace('K','_K')|replace('L','_L')|replace('M','_M')|replace('N','_N')|replace('O','_O')|replace('P','_P')|replace('Q','_Q')|replace('R','_R')|replace('S','_S')|replace('T','_T')|replace('U','_U')|replace('V','_V')|replace('W','_W')|replace('X','_X')|replace('Y','_Y')|replace('Z','_Z')|upper)|replace("_I_D","_ID")}}
      {%- endmacro %}

      {%- macro clean_date(dt) -%}

          {% if dt | length > 10 %}
              left({{ dt }}, 10)
          {% else %}
              {{ dt }}
          {% endif %}

      {%- endmacro -%}

      {%- macro compare_date1_before_date2_conditional(date1_raw, date2_raw, expr) -%}

          {% set date1 = clean_date(date1_raw) %}
          {% set date2 = clean_date(date2_raw) %}

              CASE
                  WHEN ({{ date1 }} IS NULL) or ({{ date2 }} IS NULL)
                      THEN TRUE
                  WHEN least(length({{ date1 }}), length({{ date2 }})) = 7 -- check year month
                      THEN substr({{ date1 }}, 1, 7) < substr({{ date2 }}, 1, 7)
                  WHEN least(length({{ date1 }}), length({{ date2 }})) = 4 -- check year
                      THEN substr({{ date1 }}, 1, 4) < substr({{ date2 }}, 1, 4)
                  WHEN least(length({{ date1 }}), length({{ date2 }})) = 10 -- check year-month-day
                      THEN {{ date1 }} < {{ date2 }}
                  ELSE FALSE
           END

      {%- endmacro -%}

      {% macro retrieve_models(database_name, schema_name) %}
          {% set query_retrieve_model_list %}
          SHOW SNOWFLAKE.ML.FORECAST
          in {{database_name}}.{{schema_name}}
          {% endset %}

          {% set model_results = run_query(query_retrieve_model_list) %}

          {{ return(model_results) }}
      {%- endmacro -%}

      {#-- The below block of code initialises variables in case of node typess using advance deployment strategy #}

      {% if desiredState %}
          {% set columns = desiredState.columns %}
          {% set storageLocations = desiredState.storageLocations %}
          {% set config = desiredState.config %}
          {% set sources = desiredState.sources %}
          {% set node = desiredState.node %}
          {% set parameters = desiredState.parameters %}
      {% endif %}

      {%- macro unit_measure(column) -%}
          CASE WHEN {{ column }} = 'EA' THEN 'SAP UNIT' ELSE 'NOT AWARE' END
      {%- endmacro %}

      {%- macro PRD_ID(column) -%}
          CASE WHEN {{ column }} = 707 THEN '1' ELSE '0' END
      {%- endmacro %}

      {#-- This macro will drop a table / view / dynamic table if it already exists as a different or the same object type #}
      {#-- Errors can occur when creating a same named object of a different type #}

      {% macro dropTblView() %}

        {%- set db = ref_no_link(node.location.name, node.name).split('.')[0]  %} 
        {%- set sch = ref_no_link(node.location.name, node.name).split('.')[1]  %} 
        {%- set obj = "{{ node.name }}"  %} 

          begin
              let db varchar := '{{db}}';
              let sch varchar := '{{sch}}';
              let obj varchar := '{{obj}}';

              begin
                  execute immediate 'drop table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop view if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop dynamic table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop task if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;
          end;
      {% endmacro %}

      {% macro resumeRootTask() %}
      {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
      {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
      {%- set fqRootTaskName = '' + tgtDb + '.' + tgtSch + '.' + desiredState.config.rootTask + ''-%} 

      begin
          let sqlDml := 'select system$task_dependents_enable(''''{{fqRootTaskName}}'''')';
          execute immediate sqlDml;
              exception
                  when statement_error then
                  return 'Task already running';
          return 'Task resumed';
      end;
      {% endmacro %}

      {% macro dup_rename() %}
          {{ sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='node') | map(attribute='name') | first + "_" + sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='column') | map(attribute='name') | first }}
      {%- endmacro %}

      {%- macro partition_by() -%}

          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = node.name -%}

          {%- for i in config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
              {%- endif -%}

          {%- endfor -%}

          {{- nsVariables.partition -}}
      {%- endmacro -%}

      {% macro order_by_col(return) %}

          {% set nsVariables = namespace(orderBy="") -%}

          {% if config.recordVersioning in ('Datetime Column','Numeric Column') -%}
              {% set datetimeNumericColSort = config.orderBy.get('items') -%}
              {% set dateTimeCol = datetimeNumericColSort  | map(attribute='colName.name') | first -%}        
              {% set nsVariables.orderBy = getSourceNameFromColumnName(dateTimeCol) + '."' + dateTimeCol + '"' -%}
          {% else -%}
              {% set dateTimeColSort = config.orderByDateTime.get('items') -%}
              {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first -%}
              {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first -%}
              {% set nsVariables.orderBy = 'to_timestamp(' + getSourceNameFromColumnName(dateCol) + '."' + dateCol + '" || ' + '\'T\'' + ' ||' + getSourceNameFromColumnName(timeCol) + '."' + timeCol + '")' -%}
          {% endif -%}

          {{ nsVariables.orderBy }}

      {% endmacro %}


      {% macro dimensionHistoryPk() %}
          {%- set nsVariables = namespace(dimensionHistoryColumns="") -%}

          {%- set partitionBy = partition_by().split(",") -%}
          {%- set orderBy = order_by_col() -%}

          {%- for col in partitionBy -%}
              {%- if loop.first -%}
                  {%- set nsVariables.dimensionHistoryColumns = col -%}
              {%- else -%}
                  {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' ||' + col -%}
              {%- endif -%}
          {%- endfor -%}

          {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' || date_part(epoch_milliseconds, ' + orderBy + ')' -%}

          {{- nsVariables.dimensionHistoryColumns -}}

      {% endmacro %}

      {% macro sourceTable() %}
          {%- set nsVariables = namespace(partition="") -%}
          {% set sourceTableName = desiredState.node.name %}

          {%- for i in desiredState.config.partitionBy.get('items') -%}

          {%- if loop.first -%}
              {%- set nsVariables.partition = '"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
          {%- else -%}
              {%- set nsVariables.partition = nsVariables.partition + ',"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
          {%- endif -%}

          {%- endfor %}

          {{- nsVariables.partition -}}

      {% endmacro %}


      {%- macro getColumnId( colName ) -%}

          {%- set columnId = columns | selectattr('name','equalto',colName) | map(attribute='id') | first -%}

          {{- columnId -}}

      {%- endmacro -%}

      {% macro getSourceNameFromColumnName( colName ) %}

          {%- set sourceObject = sources[0].columns | selectattr('id','eq',getColumnId( colName )) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {% macro getSourceNameFromColumnId( colId ) %}

          {%- set sourceObject = sources[0].columns | selectattr('id','eq',colId) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {%- macro ref_raw(location_name, node_name) -%}
          {%- raw -%}{{ ref('{% endraw %}{{- location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}

      {%- macro ref_no_link_raw(location_name, node_name) -%}
          {% raw %}{{ ref_no_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}

      {%- macro ref_link_raw(location_name, node_name) -%}
          {% raw %}{{ ref_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}


      {%- macro join_columns() -%}
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = node.name -%}

          {%- for i in config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = colName -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + colName -%}
              {%- endif -%}

          {%- endfor -%}

          {{- nsVariables.partition -}}

      {%- endmacro -%}


      {#-- This macro will frame the order by clause with the columns and sort order specified in config #}
      {#-- Input parmeters   - None #}
      {#-- Return            - Order by clause #}

      {%- macro sortorder_by_colv(return) -%}
          {%- set nsVariables = namespace(sortcolNames="") -%}
          {%if config.orderby %}
              {%- for i in config.orderbycolumn.get('items') -%}
                  {%- set colName = i.sortColName.name -%}
                  {%- set colOrder = i.sortOrder -%}
      	        {%- if loop.first -%}	      
      		        {%- set nsVariables.sortcolNames = '"' + colName + '"' + colOrder -%}	  
      	        {%- else -%}      
      		        {%- set nsVariables.sortcolNames = nsVariables.sortcolNames + ',' + '"' + colName + '"' + colOrder-%}	  
      	        {%- endif -%}
              {%- endfor -%}	
                  {%- set nsVariables.sortcolNames = 'order by' + nsVariables.sortcolNames -%}
       
          {% endif %} 
          
          {{- nsVariables.sortcolNames -}}
       
      {%- endmacro -%}



      {#-- This macro will split the join clause into from and rest of the clauses like where,groupby,orderby ,qualify  #}
      {#-- Input parmeters   - joinclause #}
      {#-- Return            - from clause and other clauses #}


      {%- macro get_clause( joinclause , ret_clause ) -%}

                  {% set join_clause = joinclause %}
                  {% set has_where_clause = 'where'in join_clause %}
                  {% set has_WHERE_clause = 'WHERE'in join_clause %}
                  {% set has_order_clause = 'order by'in join_clause %}
                  {% set has_ORDER_clause = 'ORDER BY'in join_clause %}
                  {% set has_group_clause =  'group by'in join_clause %}
                  {% set has_GROUP_clause = 'GROUP BY'in join_clause %}
                  {% set has_qualify_clause =  'qualify'in join_clause %}
                  {% set has_QUALIFY_clause = 'QUALIFY'in join_clause %}

                 

                  {% set clause='default' %}

                  {% if has_where_clause %}

                      {% set keyword='where'%} 
                      {% set clause='where_clause' %}
        
                  {% elif  has_WHERE_clause %}

                       {% set keyword='WHERE'%}
                       {% set clause='where_clause' %}
                  {% endif %}

                  {% if has_group_clause and clause != 'where_clause'  %}

                       {% set keyword='group by'%}
                       {% set clause='group_clause' %}
                  
                  {% elif  has_GROUP_clause and clause != 'where_clause' %}

                       {% set keyword='GROUP BY'%}
                       {% set clause='group_clause' %}

                  {% endif %}
      			
                  {% if has_qualify_clause and clause != 'where_clause' and clause != 'group_clause'  %}

                       {% set keyword='qualify'%}
                       {% set clause='qualify_clause' %}
                  
                  {% elif  has_QUALIFY_clause and clause != 'where_clause' and clause != 'group_clause'  %}

                       {% set keyword='QUALIFY'%}
                       {% set clause='qualify_clause' %}

                  {% endif %}            

      			{% if has_order_clause and  clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}

                       {% set keyword='order by'%}
                       {% set clause='order_clause' %}
                  
                  {% elif has_ORDER_clause and clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}

                       {% set keyword='ORDER BY'%}
                       {% set clause='order_clause' %}

                  {% endif %}



                  {% if clause == 'where_clause' %}
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'AND' + join_clause.split(keyword)[1] %}

                  {% elif clause == 'group_clause' %}

                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'group by' + join_clause.split(keyword)[1] %}

                  
                  {% elif clause == 'qualify_clause' %}

                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'qualify' + join_clause.split(keyword)[1] %}


                  {% elif clause == 'order_clause' %}

                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause =  'order by' + join_clause.split(keyword)[1] %}
                     

                  {% else %}

                     {% set from_clause = join_clause %}
                     {% set add_clause = '' %}

                  {% endif %}
      			
      			{% if ret_clause == 'from' %}
      			   {{ from_clause }}
      			{% else %}
      			   {{ add_clause }}
      			{% endif %}
      			
      			
      {%- endmacro -%}

            {#------------------------------------------------------------------------------------------------------#}
            {#-- Global variables of datavault4coalesce                                                           --#}
            {#--                                                                                                  --#}
            {#-- The following variables can be customized to implement your own DV standard definition.          --#}
            {#-- They will be used in the macros found below.                                                     --#}
            {#-- Refer to official wiki: https://github.com/ScalefreeCOM/datavault4coalesce/wiki/Global-variables --#}
            {#------------------------------------------------------------------------------------------------------#}
            {%- set datavault4coalesce = namespace(
                 config = {
                 "ldts_alias": "LDTS",
                 "rsrc_alias": "RSRC", 
                 "ledts_alias": "LEDTS",
                 "stg_alias": "STG", 
                 "snapshot_trigger_column": "IS_ACTIVE",
                 "use_object_name_prefix": TRUE,
                 "sdts_alias": "SDTS",
                 "is_current_col_alias": "IS_CURRENT", 
                 "hash": "MD5", 
                 "hash_datatype": "STRING", 
                 "hash_input_case_sensitive": "TRUE",
                 "hash_passthrough_input_transformations": "TRUE",
                 "beginning_of_all_times": "0001-01-01T00:00:01",
                 "end_of_all_times": "8888-12-31T23:59:59",
                 "timestamp_format": "YYYY-MM-DDTHH24:MI:SS", 
                 "default_unknown_rsrc": "SYSTEM", 
                 "default_error_rsrc": "ERROR", 
                 "rsrc_default_dtype": "STRING", 
                 "stg_default_dtype": "STRING", 
                 "error_value__STRING": "'(error)'", 
                 "error_value_alt__STRING": "'e'", 
                 "unknown_value__STRING": "'(unknown)'",
                 "unknown_value_alt__STRING": "'u'"
                 }
            ) -%}

            {%- macro ref_raw(location_name, node_name) -%}
                {% raw %}{{ ref('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
            {%- endmacro -%}

            {%- macro ref_no_link_raw(location_name, node_name) -%}
                {% raw %}{{ ref_no_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
            {%- endmacro -%}

            {%- macro ref_link_raw(location_name, node_name) -%}
                {% raw %}{{ ref_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
            {%- endmacro -%}

            {#-- Utility macro: outputs a SQL function to convert input string into a timestamp of dynamic format. --#}
            {%- macro datavault4coalesce__string_to_timestamp(format, timestamp) -%}
            TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')
            {%- endmacro -%}

            {#-- Utility macro: check if string object is an expression --#}
            {%- macro datavault4coalesce__is_expression(obj) -%}
                {%- if obj is string -%}
                    {%- if (obj|first == "'" and obj|last == "'") or ("(" in obj and ")" in obj) or "::" in obj or "||" in obj -%}
                        {{ true }}
                    {%- else -%}
                        {{ false }}
                    {%- endif -%}
                {%- else -%}
                    {{ false }}
                {%- endif -%}
            {%- endmacro -%}

            {#-- Utility macro: check if object exists, is defined and not empty --#}
            {%- macro datavault4coalesce__is_something(obj) -%}
                {%- if obj is not none and obj is defined and obj -%}
                    {{ true }}
                {%- else -%}
                    {{ false }}
                {%- endif -%}
            {%- endmacro -%}

            {#-- Utility macro: wrap string input between escape characters --#}
            {%- macro datavault4coalesce__escape_column_name(column) -%}
                {%- set escape_char_left  = '"' -%}
                {%- set escape_char_right = '"' -%}
                {%- set escaped_column_name = escape_char_left ~ column|upper|replace(escape_char_left, '')|replace(escape_char_right, '')|trim ~ escape_char_right|indent(4) -%}
                
              {{ escaped_column_name }}
            {%- endmacro -%}

            {#-- Utility macro: wrap input between escape characters --#}
            {%- macro datavault4coalesce__as_constant(column_str) -%}
                {%- if column_str is not none and column_str is string and column_str -%}
                    {%- if column_str|first == "!" -%}
                        {{- "'" ~ column_str[1:] ~ "'" -}}
                    {%- else -%}
                        {%- if datavault4coalesce__is_expression(column_str) -%}
                            {{- column_str -}}
                        {%- else -%}
                            {{- datavault4coalesce__escape_column_name(column_str) -}}
                        {%- endif -%}
                    {%- endif -%}
                {%- endif -%}
            {%- endmacro -%}

            {#-----------------------------------------------------------------------------------------------#}
            {#-- DV Utility macro: generates a string as the record source.                                --#}
            {#--                                                                                           --#}
            {#-- The record source is a standard, technical attribute in Data Vault 2.0 object structures. --#}
            {#-- It is used to identify the origin of a data record and should contain a detailed path     --#}
            {#--    to trace a record back to its source table and source system.                          --#}
            {#-----------------------------------------------------------------------------------------------#}
            {%- macro record_source() -%}
            {%- if sources[0].dependencies -%}
                 {% set src = storageLocations | selectattr('name', "equalto", sources[0].dependencies[0].node.location.name) | list | first %} 
                 '"{{src.database}}"."{{src.schema}}"."{{sources[0].dependencies[0].node.name}}"'
            {%- else -%}
                 'Missing Dependencies!'
            {%- endif -%}
            {%- endmacro -%}

            {#--------------------------------------------------------------------------------------------------#}
            {#-- DV Utility macro: Generate default values for ghost record.                                  --#}
            {#--                                                                                              --#}
            {#-- As part of the INSERT statements for DV2.0 ghost records, the output of this macro processes --#}
            {#-- table columns and generate default values based on the column data types.                    --#}
            {#-- Usage: create template for node type DataVault by Scalefree: Stage.                          --#}
            {#--                                                                                              --#}
            {#-- Parameters:                                                                                  --#}
            {#--     column_name: name of table column to be processed.                                       --#}
            {#--     datatype: datatype of table column.                                                      --#}
            {#--     ghost_record_type : type of the ghost record being generated.                            --#}
            {#--                         By default, Datavault4coalesce uses 2 types: 'unknown' and 'error'.  --#}
            {#--     hash: indicates if the table column being process is either a hash key or a change hash. --#}
            {#--           Values: true | false                                                                 --#}
            {#--     hash_algo: hash algorithm being used for the hashing function.                           --#}
            {#--------------------------------------------------------------------------------------------------#}
            {%- macro datavault4coalesce__ghost_record_per_datatype(column_name, datatype, ghost_record_type, hash, hash_algo=none) -%}

            {%- set beginning_of_all_times = datavault4coalesce.config.beginning_of_all_times -%}
            {%- set end_of_all_times = datavault4coalesce.config.end_of_all_times -%}
            {%- set timestamp_format = datavault4coalesce.config.timestamp_format -%}
            {%- set unknown_value__STRING = datavault4coalesce.config.unknown_value__STRING -%}
            {%- set unknown_value_alt__STRING = datavault4coalesce.config.unknown_value_alt__STRING -%}
            {%- set error_value__STRING = datavault4coalesce.config.error_value__STRING -%}
            {%- set error_value_alt__STRING = datavault4coalesce.config.error_value_alt__STRING -%}

            {%- if hash %}

                 {%- set datatype = datatype|upper -%}
                 {%- set hash_alg = datavault4coalesce__hash_algorithm(hash_function=hash_algo, hash_datatype=datatype) -%}
                 {%- set unknown_key = datavault4coalesce__unknown_key(hash_function=hash_algo, hash_datatype=datatype) -%}
                 {%- set error_key = datavault4coalesce__error_key(hash_function=hash_algo, hash_datatype=datatype) -%}

                 {%- if ghost_record_type == 'unknown' -%}
                      {{ unknown_key }} as {{ column_name }}
                 {%- elif ghost_record_type == 'error' -%}
                      {{ error_key }} as {{ column_name }}
                 {% endif %}

            {% else %}

                 {%- if ghost_record_type == 'unknown' -%}
                 {%- if datatype.upper().startswith('TIMESTAMP') or datatype.upper().startswith('DATE') -%}{{ datavault4coalesce__string_to_timestamp(timestamp_format, beginning_of_all_times) }} AS {{ column_name }}
                 {% elif datatype.upper().startswith('STRING') or datatype.upper().startswith('VARCHAR') %}
                      {%- if datatype.upper().startswith('VARCHAR') and datatype[8:-1]|int >= unknown_value__STRING|length -%} {{unknown_value__STRING}} AS {{ column_name }}
                      {%- elif datatype.upper().startswith('STRING') -%} {{unknown_value__STRING}} AS {{ column_name }}
                      {% else %} {{unknown_value_alt__STRING}} AS {{ column_name }}
                      {% endif %}
                 {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] or datatype.upper().startswith('NUMBER') %}0 AS {{ column_name }}
                 {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}
                 {% else %}NULL AS {{ column_name }}
                 {% endif %}
                 
                 {%- elif ghost_record_type == 'error' -%}
                 {%- if datatype.upper().startswith('TIMESTAMP') or datatype.upper().startswith('DATE') -%}{{ datavault4coalesce__string_to_timestamp(timestamp_format, end_of_all_times) }} AS {{ column_name }}
                 {% elif datatype.upper().startswith('STRING') or datatype.upper().startswith('VARCHAR') %}
                      {%- if datatype.upper().startswith('VARCHAR') and datatype[8:-1]|int >= error_value__STRING|length -%} {{error_value__STRING}} AS {{ column_name }}
                      {%- elif datatype.upper().startswith('STRING') -%} {{error_value__STRING}} AS {{ column_name }}
                      {% else %} {{error_value_alt__STRING}} AS {{ column_name }}
                      {% endif %}
                 {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] or datatype.upper().startswith('NUMBER') %}-1 AS {{ column_name }}
                 {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}
                 {% else %}NULL AS {{ column_name }}
                 {% endif %}
                 {%- endif -%}

            {%- endif -%}
            {%- endmacro -%}

            {#---------------------------------------------------------------------------------------------#}
            {#-- DV Utility macro: Output unknown zero key for ghost record.                             --#}
            {#--                                                                                         --#}
            {#-- Generates unknown zero key based on the hashing algorithm being used for ghost records. --#}
            {#-- Usage: main hashing macro datavault4coalesce__hash                                      --#}
            {#--        and macro for ghost record datavault4coalesce__ghost_record_per_datatype         --#}
            {#--                                                                                         --#}
            {#-- Parameters:                                                                             --#}
            {#--     hash_function: hashing algorithm.                                                   --#}
            {#--     hash_datatype: datatype of hash column.                                             --#}
            {#---------------------------------------------------------------------------------------------#}
            {%- macro datavault4coalesce__unknown_key(hash_function=none, hash_datatype=none) -%}
                 {%- if hash_function is none -%}
                      {%- set hash_function = datavault4coalesce.config.hash -%}
                 {%- endif -%}
                 {%- if hash_datatype is none -%}
                      {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}
                 {%- endif -%}     

                 {%- set dict_result = {} -%}
                 {%- set unknown_key = '' -%}

                 {%- if hash_function == 'MD5' -%}
                      {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                           {%- set unknown_key = '!00000000000000000000000000000000' -%}
                      {%- elif 'BINARY' in hash_datatype -%}  
                           {%- set unknown_key = "TO_BINARY('00000000000000000000000000000000')" -%}     
                      {%- endif -%}                       
                 {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                      {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                           {%- set unknown_key = '!0000000000000000000000000000000000000000' -%}
                      {%- elif 'BINARY' in hash_datatype -%}
                           {%- set unknown_key = "TO_BINARY('0000000000000000000000000000000000000000')" -%}     
                      {%- endif -%}
                 {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' or hash_function == 'SHA256'  -%}
                      {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                           {%- set unknown_key = '!0000000000000000000000000000000000000000000000000000000000000000' -%}
                      {%- elif 'BINARY' in hash_datatype -%}
                           {%- set unknown_key = "TO_BINARY('0000000000000000000000000000000000000000000000000000000000000000')" -%}  
                      {%- endif -%}   
                 {%- endif -%}

                 {% set unknown_key = datavault4coalesce__as_constant(unknown_key) %}
                 {{ unknown_key }}

            {%- endmacro -%}

            {#---------------------------------------------------------------------------------------------#}
            {#-- DV Utility macro: Output error zero key for ghost record.                               --#}
            {#--                                                                                         --#}
            {#-- Generates error zero key based on the hashing algorithm being used for ghost records.   --#}
            {#-- Usage: main hashing macro datavault4coalesce__hash                                      --#}
            {#--        and macro for ghost record datavault4coalesce__ghost_record_per_datatype         --#}
            {#--                                                                                         --#}
            {#-- Parameters:                                                                             --#}
            {#--     hash_function: hashing algorithm.                                                   --#}
            {#--     hash_datatype: datatype of hash column.                                             --#}
            {#---------------------------------------------------------------------------------------------#}
            {%- macro datavault4coalesce__error_key(hash_function=none, hash_datatype=none) -%}
                 {%- if hash_function is none -%}
                      {%- set hash_function = datavault4coalesce.config.hash -%}
                 {%- endif -%}
                 {%- if hash_datatype is none -%}
                      {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}
                 {%- endif -%}  

                 {%- set dict_result = {} -%}
                 {%- set error_key = '' -%}

                 {%- if hash_function == 'MD5' -%}
                      {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                           {%- set error_key = '!ffffffffffffffffffffffffffffffff' -%}
                      {%- elif 'BINARY' in hash_datatype -%}  
                           {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffff')" -%}     
                      {%- endif -%}          
                 {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                      {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                           {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffff' -%}
                      {%- elif 'BINARY' in hash_datatype -%}
                           {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffffffffffff')" -%}        
                      {%- endif -%}
                 {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' or hash_function == 'SHA256'  -%}
                      {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                           {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' -%}
                      {%- elif 'BINARY' in hash_datatype -%}
                           {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')" -%}        
                      {%- endif -%}   
                 {%- endif -%}

                 {% set error_key = datavault4coalesce__as_constant(error_key) %}
                 {{ error_key }}
            {%- endmacro -%}

            {#---------------------------------------------------------------------------------------------#}
            {#-- DV Utility macro: Hashing algorithm.                                                    --#}
            {#--                                                                                         --#}
            {#-- Outputs hashing algorithm and Snowflake function to calculate hashes based on  --#}
            {#-- If parameters are empty, default options in global variables will be used. --#}
            {#-- Usage: main hashing macro datavault4coalesce__hash                                      --#}
            {#--        and macro for ghost record datavault4coalesce__ghost_record_per_datatype         --#}
            {#--                                                                                         --#}
            {#-- Parameters:                                                                             --#}
            {#--     hash_function: hashing algorithm.                                                   --#}
            {#--     hash_datatype: datatype of hash column.                                             --#}
            {#---------------------------------------------------------------------------------------------#}
            {%- macro datavault4coalesce__hash_algorithm(hash_function=none, hash_datatype=none) -%}

                 {%- if hash_function is none -%}
                      {%- set hash_function = datavault4coalesce.config.hash -%}
                 {%- endif -%}
                 {%- if hash_datatype is none -%}
                      {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}
                 {%- endif -%}  

                 {%- set dict_result = {} -%}
                 {%- set hash_alg = '' -%}

                 {%- if hash_function == 'MD5' -%}
                      {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                           {%- set hash_alg = 'MD5' -%}
                      {%- elif 'BINARY' in hash_datatype -%}
                           {%- set hash_alg = 'MD5_BINARY' -%}       
                      {%- endif -%}
                 {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                      {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                           {%- set hash_alg = 'SHA1' -%}
                      {%- elif 'BINARY' in hash_datatype -%}
                           {%- set hash_alg = 'SHA1_BINARY' -%}       
                      {%- endif -%}
                 {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' or hash_function == 'SHA256' -%}
                      {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                           {%- set hash_alg = 'SHA2' -%}
                      {%- elif 'BINARY' in hash_datatype -%}
                           {%- set hash_alg = 'SHA2_BINARY' -%}       
                      {%- endif -%}   
                 {%- endif -%}

                 {{ hash_alg }}

            {%- endmacro -%}

            {%- macro datavault4coalesce__attribute_standardise() -%}
            CONCAT('\"', REPLACE(REPLACE(REPLACE(TRIM(CAST([EXPRESSION] AS STRING)), '\\', '\\\\'), '[QUOTE]', '\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\"')
            {%- endmacro -%}

            {#---------------------------------------------------------------------------------------------------------#}
            {#-- Generate the first part of wrapper for hash inputs in DV hashing calculation                        --#}
            {#-- Usage: in main hashing macro datavault4coalesce__hash.                                                --#}
            {#--                                                                                                     --#}
            {#-- Parameters:                                                                                         --#}
            {#--     case_sensitive  : determines if hash input(s) should be treated with case sensitive.            --#}
            {#--                       If set to true, all hash inputs will be uppercased before hash operation.     --#}
            {#--     hash_alg        : overwrites default hash algorithm from global variables.                      --#}
            {#--                       REMOVEME not needed here                                                      --#}
            {#--     is_hashdiff     : determines if hash calculation is for a change hash a.k.a. hash difference    --#}
            {#--                       If set to TRUE, return patterns for hash diff calculation.                    --#}
            {#--                       If set to FALSE, return patterns for hash key calculation.                    --#}
            {#--     datatype        : data type of hash input attribute.                                            --#}
            {#--     zero_key        : default value for zero key - by default, set under the global variables       --#}
            {#--     alias           : alias for attribute name.                                                     --#}
            {#--     multi_active_key: list of multi-active keys, if available (i.e. hash in multi-active satellite) --#}
            {#--     main_hashkey_col: name of the main hash key column, if target is a multi-active satellite.      --#}
            {#---------------------------------------------------------------------------------------------------------#}
            {%- macro datavault4coalesce__standardise_prefix(case_sensitive, hash_alg, is_hashdiff, datatype, zero_key, alias, multi_active_key, main_hashkey_col) -%}
            {%- set dict_result = {} -%}
            {%- set zero_key = datavault4coalesce__as_constant(column_str=zero_key) -%}
            {%- set listagg_opening = "" -%}

            {#-- If definition of multi-active key(s) is found, prep string variables:                      --#}
            {#--     multi_active_key: list of multi-active keys, concatenated with comma delimiter.        --#}
            {#--     listagg_opening : 1st part of LISTAGG window function, used in                         --#}
            {#--                       hashing calculation of multi-active satellite's hash diff attribute. --#}
            {%- if is_hashdiff and multi_active_key is defined and multi_active_key|length>0 -%}
                {%- set listagg_opening = "LISTAGG(" -%}
            {%- endif -%}

            {%- if 'VARCHAR' in datatype or 'CHAR' in datatype or 'STRING' in datatype or 'TEXT' in datatype %}
                {%- if case_sensitive -%}
                    {%- set standardise_prefix = "IFNULL(LOWER({}({}NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(".format(hash_alg, listagg_opening)-%}
                {%- else -%}
                    {%- set standardise_prefix = "IFNULL(LOWER({}({}NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(".format(hash_alg, listagg_opening)-%}
                {%- endif -%}

            {%- else -%}
                {%- if case_sensitive -%}
                    {%- set standardise_prefix = "IFNULL({}({}NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(".format(hash_alg, listagg_opening)-%}
                {%- else -%}
                    {%- set standardise_prefix = "IFNULL({}({}NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(".format(hash_alg, listagg_opening)-%}
                {%- endif -%}
            {%- endif -%}

            {{ standardise_prefix }}
            {%- endmacro -%}

            {#---------------------------------------------------------------------------------------------------------#}
            {#-- Generate the second part of wrapper for hash inputs in DV hashing calculation                       --#}
            {#-- Used in main hashing macro datavault4coalesce__hash.                                                --#}
            {#--     case_sensitive  : determines if hash input(s) should be treated with case sensitive.            --#}
            {#--                       If set to true, all hash inputs will be uppercased before hash operation.     --#}
            {#--     hash_alg        : overwrites default hash algorithm from global variables.                      --#}
            {#--                       REMOVEME not needed here                                                      --#}
            {#--     is_hashdiff     : determines if hash calculation is for a change hash a.k.a. hash difference    --#}
            {#--                       If set to TRUE, return patterns for hash diff calculation.                    --#}
            {#--                       If set to FALSE, return patterns for hash key calculation.                    --#}
            {#--     datatype        : data type of hash input attribute.                                            --#}
            {#--     zero_key        : default value for zero key - by default, set under the global variables       --#}
            {#--     alias           : alias for attribute name.                                                     --#}
            {#--     multi_active_key: list of multi-active keys, if available (i.e. hash in multi-active satellite) --#}
            {#--     main_hashkey_col: name of the main hash key column, if target is a multi-active satellite.      --#}
            {#--------------------------------------------------------------------------------------------------------#}
            {%- macro datavault4coalesce__standardise_suffix(case_sensitive, hash_alg, is_hashdiff, datatype, zero_key, alias, multi_active_key, main_hashkey_col) -%}
            {%- set dict_result = {} -%}
            {%- set ldts_alias = datavault4coalesce.config.ldts_alias -%}
            {%- set zero_key = datavault4coalesce__as_constant(column_str=zero_key) -%}
            {%- set listagg_closing = "" -%}

            {#-- If definition of multi-active key(s) is found, prep the following string variables: --#}
            {#--     multi_active_key: list of multi-active keys, concatenated with comma delimiter. --#}
            {#--     listagg_closing : 2nd part of LISTAGG window function, used in                  --#}
            {#--                       hashing calculation of multi-active                           --#}
            {#--                       satellite's hash diff attribute.                              --#}
            {%- if is_hashdiff and multi_active_key is defined and multi_active_key|length>0 -%}
                {%- set multi_active_key = multi_active_key|join(", ") -%}
                {%- set listagg_closing = ' WITHIN GROUP (ORDER BY "{}") OVER (PARTITION BY "{}", "{}"))'.format(multi_active_key, main_hashkey_col, ldts_alias) -%}
            {%- endif -%}

            {%- if 'VARCHAR' in datatype or 'CHAR' in datatype or 'STRING' in datatype or 'TEXT' in datatype %}
                {%- if case_sensitive -%}
                    {%- if alias is not none -%}
                  {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')){}, {}) AS {}".format(listagg_closing, zero_key, alias)-%}      
                    {%- else -%}
                  {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')){}, {})".format(listagg_closing, zero_key)-%}
                    {%- endif -%}
                {%- else -%}
                    {%- if alias is not none -%}
                        {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')){}, {}) AS {}".format(listagg_closing, zero_key, alias)-%}
                    {%- else -%}
                  {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')){}, {})".format(listagg_closing, zero_key)-%}
                    {%- endif -%}
                {%- endif -%}

            {%- else -%}
                {%- if case_sensitive -%}
                    {%- if alias is not none -%}
                        {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')){}, {}) AS {}".format(listagg_closing, zero_key, alias)-%}
                    {%- else -%}
                        {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')){}, {})".format(listagg_closing, zero_key)-%}
                    {%- endif -%}
                {%- else -%}
                    {%- if alias is not none -%}
                        {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')){}, {}) AS {}".format(listagg_closing, zero_key, alias)-%}
                    {%- else -%}
                        {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')){}, {})".format(listagg_closing, zero_key)-%}
                    {%- endif -%}
                {%- endif -%}
            {%- endif -%}
            {{ standardise_suffix }}
            {%- endmacro -%}

            {#---------------------------------------------------------------------------------#}
            {#-- Main macro for DV2.0 hashing.                                               --#}
            {#---------------------------------------------------------------------------------#}
            {%- macro datavault4coalesce__hash(columns, alias=none, is_hashdiff=false, datatype='STRING', algo='MD5', multi_active_key=[], main_hashkey_col='') -%}
            {#-- Setup DV2.0 standards for hashing                                           --#}
            {#--                                                                             --#}
            {#-- Modify the following settings to implement your DV2.0 hashing standards.    --#}
            {#--   concat_string: string used to concatenate hash input fields.              --#}
            {#--                  Recommended: || (double pipes) or _ (underscore)           --#}
            {#--   quote: character used to quote around hash input fields.                  --#}
            {#--          Recommended: '"' (double quotes)                                   --#}
            {#--  null_placeholder_string: ???                                               --#}
            {#--  hash_input_case_sensitive: case sensitivity settings for hash input.       --#}
            {%- set concat_string = '||' -%}
            {%- set quote = '"' -%}
            {%- set null_placeholder_string = '^^' -%}
            {%- set hash_input_case_sensitive = datavault4coalesce.config.hash_input_case_sensitive -%}

            {#-- Select hashing algorithm from global variables. --#}
            {%- set datatype = datatype|upper -%}
            {%- set hash_alg = datavault4coalesce__hash_algorithm(hash_function=algo, hash_datatype=datatype) -%}
            {%- set unknown_key = datavault4coalesce__unknown_key(hash_function=algo, hash_datatype=datatype) -%}
            {%- set error_key = datavault4coalesce__error_key(hash_function=algo, hash_datatype=datatype) -%}

            {%- set attribute_standardise = datavault4coalesce__attribute_standardise() %}

            {#-- Set up a list of columns going into hashing calculation --#}
            {%- set ns = namespace(columns=[], all_null=[]) -%}
            {%- set columns_input = columns -%}

            {%- for column in columns_input -%}
                 {%- set ns.columns = ns.columns + [column.name] -%}
            {%- endfor -%}

            {%- set standardise_prefix = datavault4coalesce__standardise_prefix(case_sensitive=hash_input_case_sensitive, 
                                                                                hash_alg=hash_alg,
                                         is_hashdiff=is_hashdiff,
                                                                                datatype=hash_dtype,
                                                                                alias=alias, 
                                                                                zero_key=unknown_key,
                                                                                multi_active_key=multi_active_key,
                                                                                main_hashkey_col=main_hashkey_col) -%}
            {%- set standardise_suffix = datavault4coalesce__standardise_suffix(case_sensitive=hash_input_case_sensitive, 
                                                                                hash_alg=hash_alg,
                                                      is_hashdiff=is_hashdiff,
                                                                                datatype=hash_dtype, 
                                                                                alias=alias, 
                                                                                zero_key=unknown_key,
                                                                                multi_active_key=multi_active_key,
                                                                                main_hashkey_col=main_hashkey_col) -%}    

            {#-- Start printing SQL for hash calculation --#}
            {{ standardise_prefix }}
            {%- for column in columns -%}
                {%- set ns.all_null = ns.all_null + [null_placeholder_string] -%}
                {%- if datavault4coalesce.config.hash_passthrough_input_transformations -%}
                    {%- set column_str = datavault4coalesce__as_constant(get_source_transform(column)) -%}
                {%- else -%}
                    {%- if '.' in column.name %}
                        {% set column_str = column.name -%}
                    {%- else -%}
                        {%- set column_str = datavault4coalesce__as_constant(column.name) -%}
                    {%- endif -%}
                {%- endif -%}

                {{- "\nCOALESCE(({}), '{}')".format(attribute_standardise | replace('[EXPRESSION]', column_str) | replace('[QUOTE]', quote) | replace('[NULL_PLACEHOLDER_STRING]', null_placeholder_string), null_placeholder_string) | indent(4) -}}
                {{- ",'{}',".format(concat_string) if not loop.last -}}

                {%- if loop.last -%}
                    {{ standardise_suffix | replace('[ALL_NULL]', ns.all_null | join("")) | indent(4) }}
                {%- else -%}
                    {%- set ns.all_null = ns.all_null + [concat_string] -%}
                {%- endif -%}
            {%- endfor -%}
            {%- endmacro -%}

            {#----------------------------------------------------------------------#}
            {#-- Outputs name of a single hash key from the direct parent object. --#}
            {#-- Usage: Node definition of Satellite v1                           --#}
            {#----------------------------------------------------------------------#}
            {%- macro get_source_hash_key_column() -%}
                 {%- set srcCols = sources[0].dependencies[0].columns -%}
                 {%- set result = namespace(name='') -%}
                 {% for srcHKCol in srcCols if srcHKCol.is_hk %}
                      {%- set result.name = srcHKCol.name -%}
                 {%- endfor -%}
                 {{- result.name -}}
            {%- endmacro -%}

            {#-------------------------------------------------------------------------#}
            {#-- Outputs list of multi-active keys from the direct parent object     --#}
            {#-- Usage: Node definition of multi-active satellite v1                 --#}
            {#--   delimiter: delimiter character to be used in string concatenation --#}
            {#-------------------------------------------------------------------------#}
            {%- macro get_source_ma_keys(delimiter=',') -%}
                 {%- set srcCols = sources[0].dependencies[0].columns -%}
                 {%- set result = [] -%}
                 {% for srcMAKey in srcCols if srcMAKey.is_ma_key %}
                      {%- set result = result.append(srcMAKey.name) -%}
                 {%- endfor -%}
                 {{- result|join(delimiter) -}}
            {%- endmacro -%}
packages: {}
projects: {}
stepTypes:
  StepType-10:
    id: "10"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Our Dimension
    version: 1
  StepType-13:
    id: "13"
    isDisabled: false
    metadata:
      defaultStorageLocation: DW
      error: null
      nodeMetadataSpec: |+
        capitalized: INCREMENTAL LOAD
        short: INC
        plural: Incremental
        tagColor: green

        config:
        - groupName: Options
          items:

          - type: materializationSelector
            default: view
            options:
            - view
            - table
            isRequired: true

          - displayName: Filter data based on Persistent Table
            attributeName: refTable
            type: toggleButton
            default: false
            isRequired: false    

          - displayName: Persistent table can be a Persistent stage,Dimension or  Fact node
            type: label
            enableIf: "{{config.refTable}}"

          - displayName: Persistent Table location(Storage location in Coalesce)
            attributeName: persistTableLocation
            type: textBox
            default: "ex: TARGET"
            isRequired: false
            enableIf: "{{config.refTable}}"

          - displayName: Persistent Table name
            attributeName: persistTableName
            type: textBox
            default: "ex: DIM_ORDERS"
            isRequired: false
            enableIf: "{{config.refTable}}"

          - displayName: "Incremental Load Column (date)"
            attributeName: incColumn
            type: columnDropdownSelector
            isRequired: false
            enableIf: "{{config.refTable}}"


        joinTemplate: |


          {%- set src = namespace() -%}
          {%- for dep in sources[0].dependencies -%}
            FROM
            {{- ref_raw(dep.node.location.name, dep.node.name) }} "{{ dep.node.name }}"
            {%- set src.name = dep.node.name -%}
          {%endfor%}
          {%- if config.persistTableName | length > 0 -%}
              {%- set persist = config.persistTableName -%}
          {%- else -%}
              {%- if  config.persistTable | length > 0 %}
                {%- set persist = node.name | replace("INC", config.persistTable) -%}
              {%- else -%}
                {%- set persist = node.name | replace("INC_", config.persistTable) -%}
              {%- endif -%}
          {%- endif -%}
          {%- if config.refTable and persist | length > 0 %}
            WHERE "{{src.name}}"."{{config.incColumn.name}}" > 
            (SELECT COALESCE(MAX("{{config.incColumn.name}}"), '1900-01-01') 
                      FROM {{ref_no_link_raw(config.persistTableLocation, persist)}} )
          {%endif%}



      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Incremental Load  == #}
            {# == Node Type Description    : This node creates a stage table,view   == #}


            {% set source = sources[0] %}

            {% if node.materializationType == 'view' %}

              {{ stage('Create Stage View') }}

            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
              ( 
                {% for col in columns if col.name != "_SEQUENCE" %}
                    "{{ col.name }}"
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {% if not loop.last %}, {% endif %}
                {% endfor %}
                )
               {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
              AS
              SELECT
              {% for col in source.columns  %}
                {{ get_source_transform(col) }} AS  "{{ col.name }}" 
                {%- if not loop.last -%}, {% endif %} 
               {% endfor %}

               {{ source.join }}

            {% elif node.materializationType == 'table' %}
            {# CreateSQL for Table #}

               {{ stage('Create Stage Table') }}


            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	
            {% endif %}
        run:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Incremental Load  == #}
            {# == Node Type Description    :  This node loads full data into stage table the first time and incremental data in subsequent loads  == #}

            {% if node.materializationType == 'table'   %}

              {% set source = sources[0] %}

                 {%if config.refTable %}
              			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
                 {%endif%}

             {{ stage('Insert Data') }}

            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
                {% for col in columns if col.name != "_SEQUENCE" %}
                    "{{ col.name }}"
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {% if not loop.last %}, {% endif %}
                {% endfor %}
            				)
            		SELECT 
            		  {% for col in source.columns  %}
                {{ get_source_transform(col) }} AS  "{{ col.name }}" 
                {%- if not loop.last -%}, {% endif %} 
               {% endfor %}

               {{ source.join }}
            {% endif %}
    name: Incremental Load
    version: 1
  StepType-14:
    id: "14"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: SHIFT_SALES
        short: Manual_S3
        tagColor: gray
        plural: Manual_S3s

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: stage
            type: dropdownSelector
            default: "s3load"
            options:
            - "s3load"
            isRequired: true

          - displayName: Stage Path
            attributeName: stagePath
            type: textBox
            default: "/analytics/shift_sales/"
            isRequired: false

        - groupName: Landing Details 
          items:
          - displayName: Table Name
            attributeName: tableName
            type: textBox
            default: "SHIFT_SALES"
            isRequired: true
      templates:
        create:
          templateString: |-
            CREATE OR REPLACE TABLE crood_dev.source_data.{{tableName}}(
            	location_id NUMBER(19,0),
            	city VARCHAR(16777216),
            	date DATE,
            	shift_sales FLOAT,
            	shift VARCHAR(2),
            	month NUMBER(2,0),
            	day_of_week NUMBER(2,0),
            	city_population NUMBER(38,0)
            );
        run:
          templateString: |-
            -- ingest from S3 into the shift sales table
            COPY INTO crood_dev.source_data.shift_sales
            FROM @crood_dev.source_data.{{config.stage}}/{{config.stagePath}};
    name: Manual_S3
    version: 1
  StepType-15:
    id: "15"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dynamic Table Dimension
        short: DT_DIM
        tagColor: "#E5FA31"
        isDisabled: true
        plural: Dynamic Tables

        deployStrategy: advanced

        config:
          - groupName: Dynamic Table Options
            items: 
            - displayName: Warehouse on which to execute Dynamic Table
              attributeName: warehouseName
              type: textBox
              default: dev_wh_xs
              isRequired: true

            - type: toggleButton
              attributeName: downstreamOption
              displayName: Downstream
              default: false
              isRequired: true

            - type: tabular
              displayName: 'Lag Specification'
              attributeName: lagSpecification
              columns:
          
              -  type: textBox
                 displayName: Time Value
                 attributeName: lagValue
                 default: 60
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Time Period
                 attributeName: lagPeriod
                 default: "Minutes"
                 options:
                 - Seconds
                 - Minutes
                 - Hours
                 - Days
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"

            - type: dropdownSelector
              displayName: Refresh Mode
              attributeName: refresh_mode
              default: "AUTO"
              options:
              - AUTO
              - INCREMENTAL
              - FULL
              isRequired: true

            - type: dropdownSelector   
              displayName: Initialize
              attributeName: initialize
              default: "ON_CREATE"
              options:
              - ON_CREATE
              - ON_SCHEDULE 
              isRequired: true

          - groupName: Dimension Options
            items:
            - type: tabular
              displayName: 'Table Key(s)'
              attributeName: partitionBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: partColName
                 isRequired: true
                
              isRequired: true

            - displayName: Record Versioning
              attributeName: recordVersioning
              type: dropdownSelector
              default: Datetime Column
              options:
                - Datetime Column
                - Date Column and Time Column
              isRequired: true

            - type: tabular
              displayName: 'Timestamp or Sequence'
              attributeName: orderBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: colName
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Datetime Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Datetime Column') %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Date / Timestamp Columns'
              attributeName: orderByDateTime
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Date Column
                 attributeName: colNameDate
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: columnDropdownSelector
                 displayName: Timestamp Column
                 attributeName: colNameTimestamp
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrdDateTimestamp
                 default: desc
                 options:
                 - desc
                 - asc
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"


          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: '{{ dimensionHistoryPk() }}'
          dataType: STRING
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: RECORD_START_TIME
          transform: '{{ order_by_col() }}'
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: RECORD_END_TIME
          transform: 'LEAD({{ order_by_col()}}) OVER (PARTITION BY {{ partition_by() }} ORDER BY {{ order_by_col() }} asc)'
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: RECORD_CURRENT_FLAG
          transform: 'CASE WHEN (LEAD({{ order_by_col()}}) OVER (PARTITION BY {{ partition_by() }} ORDER BY {{ order_by_col() }} asc)) IS NULL THEN 1 ELSE 0 END'
          dataType: NUMERIC
          placement: end
          attributeName: isRecordCurrent

        - displayName: RECORD_CREATED_DATE
          transform: 'FIRST_VALUE({{ order_by_col()}}) OVER (PARTITION BY {{ partition_by() }} ORDER BY {{ order_by_col() }} asc)'
          dataType: TIMESTAMP
          placement: end
          attributeName: recordCreated
      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dynamic Table Dimension  == #}
            {# == Node Type Description    : This node creates and runs dynamic table dimension  == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0
            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources == desiredState.sources %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Varialbes
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Test 
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
                    {% set partitionByTest = currentState.config.partitionBy == desiredState.config.partitionBy %}
                    {% set orderByTest = currentState.config.orderBy == desiredState.config.orderBy %}
                    {% set orderByDateTimeTest = currentState.config.orderByDateTime == desiredState.config.orderByDateTime %}
                    {% set recordVersioningTest = currentState.config.recordVersioning == desiredState.config.recordVersioning %}

                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}


                    ## Refresh_mode test
                    {% set refreshTest = currentState.config.refresh_mode == desiredState.config.refresh_mode %}

                    ## Initialize test
                    {% set initializeTest = currentState.config.initialize == desiredState.config.initialize %}

                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        partitionByTest == false or 
                        orderByTest == false or 
                        orderByDateTimeTest == false or 
                        recordVersioningTest == false or 
                        nodeNameTest == false or
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false or 
                        initializeTest == false or 
                        refreshTest == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false or
                        nodeCommentTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Refresh-type option
                    {% set dynamicTablerefresh = desiredState.config.refresh_mode %}

                    ##Initialize option
                    {% set dynamicTableinitialize = desiredState.config.initialize %}

                    {{ stage('Create Dynamic Dimension Table', true, "sql", "create") }}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        REFRESH_MODE   = {{dynamicTablerefresh}}
                        INITIALIZE = {{dynamicTableinitialize}}
                        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    AS
                    {% for source in desiredState.sources %}
                        SELECT 
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    

                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}

                    {%- if desiredState.node.description | length > 0 %}
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}
                        {{ dynamicTableComment }}
                    
                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} REFRESH

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Dynamic Table Dimension
    version: 1
  StepType-16:
    id: "16"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dyanmic Table Latest Record Version
        short: DT_WRK
        tagColor: "#FFD202"
        isDisabled: true
        plural: Dynamic Tables

        deployStrategy: advanced

        config:
          - groupName: Dynamic Table Options
            items: 
            - displayName: Warehouse on which to execute Dynamic Table
              attributeName: warehouseName
              type: textBox
              default: dev_wh_xs
              isRequired: true

            - type: toggleButton
              attributeName: downstreamOption
              displayName: Downstream
              default: false
              isRequired: true

            - type: tabular
              displayName: 'Lag Specification'
              attributeName: lagSpecification
              columns:
          
              -  type: textBox
                 displayName: Time Value
                 attributeName: lagValue
                 default: 60
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Time Period
                 attributeName: lagPeriod
                 default: "Minutes"
                 options:
                 - Seconds
                 - Minutes
                 - Hours
                 - Days
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"

            - type: dropdownSelector
              displayName: Refresh Mode
              attributeName: refresh_mode
              default: "AUTO"
              options:
              - AUTO
              - INCREMENTAL
              - FULL
              isRequired: true

            - type: dropdownSelector   
              displayName: Initialize
              attributeName: initialize
              default: "ON_CREATE"
              options:
              - ON_CREATE
              - ON_SCHEDULE 
              isRequired: true

          - groupName: Record Versioning Options
            items:
            - type: tabular
              displayName: 'Table Key(s)'
              attributeName: partitionBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: partColName
                 isRequired: true
                
              isRequired: true

            - displayName: Record Versioning
              attributeName: recordVersioning
              type: dropdownSelector
              default: Datetime Column
              options:
                - Datetime Column
                - Date Column and Time Column
              isRequired: true

            - type: tabular
              displayName: 'Timestamp'
              attributeName: orderBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: colName
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Datetime Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Datetime Column') %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Date / Timestamp Columns'
              attributeName: orderByDateTime
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Date Column
                 attributeName: colNameDate
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: columnDropdownSelector
                 displayName: Timestamp Column
                 attributeName: colNameTimestamp
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrdDateTimestamp
                 default: desc
                 options:
                 - desc
                 - asc
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false

        systemColumns:
          - displayName: RECORD_CREATED_DATE
            transform: 'FIRST_VALUE({{ order_by_col()}}) OVER (PARTITION BY {{ partition_by() }} ORDER BY {{ order_by_col() }} asc)'
            dataType: TIMESTAMP
            placement: end
            attributeName: recordCreated
            
      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dynamic Table Latest Record Version  == #}
            {# == Node Type Description    : This node creates and runs dynamic table work with latest record version == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources | count == desiredState.sources | count %}
                    {% set joinTest = currentState.join == desiredState.join %}

                    {# Test to see if the transform in a column has changed #}
                    {# Desired Namespace Variables Transform #}
                    {% set desiredTransformArray = desiredState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {# Test to see if the transform in a column has changed #}
                    {# Current Namespace Variables Transform #}
                    {% set currentTransformArray = currentState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {% set columnsTransformTest = currentTransformArray == desiredTransformArray %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Variables
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings
                    ## sourceTest handles changed Storage Location Names
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
                    {% set groupByAllTest = currentState.config.groupByAll == desiredState.config.groupByAll %}
                    {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}
                    {% set partitionByTest = currentState.config.partitionBy == desiredState.config.partitionBy %}
                    {% set orderByTest = currentState.config.orderBy == desiredState.config.orderBy %}
                    {% set orderByDateTimeTest = currentState.config.orderByDateTime == desiredState.config.orderByDateTime %}
                    {% set recordVersioningTest = currentState.config.recordVersioning == desiredState.config.recordVersioning %}

                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}

                    ## Refresh_mode test
                    {% set refreshTest = currentState.config.refresh_mode == desiredState.config.refresh_mode %}

                    ## Initialize test
                    {% set initializeTest = currentState.config.initialize == desiredState.config.initialize %}


                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        joinTest == false or
                        columnsTransformTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        groupByAllTest == false or 
                        selectDistinctTest == false or 
                        partitionByTest == false or 
                        orderByTest == false or 
                        orderByDateTimeTest == false or 
                        recordVersioningTest == false or 
                        nodeNameTest == false or 
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false or 
                        initializeTest == false or
                        refreshTest == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% else %}
                        {% set warehouseTest = currentState.parameters.targetDynamicTableWarehouse == desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false or
                        nodeCommentTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Refresh-type option
                    {% set dynamicTablerefresh = desiredState.config.refresh_mode %}

                    ##Initialize option
                    {% set dynamicTableinitialize = desiredState.config.initialize %}

                    ## Node description
                    {%- if desiredState.node.description | length > 0 %} 
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Create Dynamic Work Table', true, "sql", "create") }}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        REFRESH_MODE   = {{dynamicTablerefresh}}
                        INITIALIZE = {{dynamicTableinitialize}}
                        {{ dynamicTableComment }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    AS
                    {% for source in desiredState.sources %}
                        SELECT 
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                   
                    QUALIFY ROW_NUMBER() OVER (PARTITION BY  {{ partition_by() }} ORDER BY {{ order_by_col() }} DESC) = 1


                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}



                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}
                    



                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}



                    {%- if desiredState.node.description | length > 0 %} 
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}
                        {{ dynamicTableComment }}
                    
                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} REFRESH

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Dynamic Table Latest Record Version
    version: 1
  StepType-17:
    id: "17"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dyanmic Table Work
        short: DT_WRK
        tagColor: "#F6FF3C"
        isDisabled: true
        plural: Dynamic Tables

        deployStrategy: advanced

        config:
          - groupName: Dynamic Table Options
            items: 
            - displayName: Warehouse on which to execute Dynamic Table
              attributeName: warehouseName
              type: textBox
              default: dev_wh_xs
              isRequired: true

            - type: toggleButton
              attributeName: downstreamOption
              displayName: Downstream
              default: false
              isRequired: true

            - type: tabular
              displayName: 'Lag Specification'
              attributeName: lagSpecification
              columns:
          
              -  type: textBox
                 displayName: Time Value
                 attributeName: lagValue
                 default: 60
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Time Period
                 attributeName: lagPeriod
                 default: "Minutes"
                 options:
                 - Seconds
                 - Minutes
                 - Hours
                 - Days
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"

            - type: dropdownSelector
              displayName: Refresh Mode
              attributeName: refresh_mode
              default: "AUTO"
              options:
              - AUTO
              - INCREMENTAL
              - FULL
              isRequired: true

            - type: dropdownSelector   
              displayName: Initialize
              attributeName: initialize
              default: "ON_CREATE"
              options:
              - ON_CREATE
              - ON_SCHEDULE 
              isRequired: true

          - groupName: General Options
            items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false
              enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

            - type: toggleButton
              attributeName: groupByAll
              displayName: Group By All
              default: false
              enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"

            - type: multisourceToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION ALL
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false
      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dynamic Table Work  == #}
            {# == Node Type Description    : This node creates and runs dynamic table work  == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources | count == desiredState.sources | count %}
                    {% set joinTest = currentState.join == desiredState.join %}

                    {# Test to see if the transform in a column has changed #}
                    {# Desired Namespace Variables Transform #}
                    {% set desiredTransformArray = desiredState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {# Test to see if the transform in a column has changed #}
                    {# Current Namespace Variables Transform #}
                    {% set currentTransformArray = currentState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {% set columnsTransformTest = currentTransformArray == desiredTransformArray %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Variables
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings
                    ## sourceTest handles changed Storage Location Names
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
                    {% set groupByAllTest = currentState.config.groupByAll == desiredState.config.groupByAll %}
                    {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}

                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}

                    ## Refresh_mode test
                    {% set refreshTest = currentState.config.refresh_mode == desiredState.config.refresh_mode %}

                    ## Initialize test
                    {% set initializeTest = currentState.config.initialize == desiredState.config.initialize %}


                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        joinTest == false or
                        columnsTransformTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        groupByAllTest == false or 
                        selectDistinctTest == false or 
                        nodeNameTest == false or 
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false or 
                        initializeTest == false or
                        refreshTest == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% else %}
                        {% set warehouseTest = currentState.parameters.targetDynamicTableWarehouse == desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false or
                        nodeCommentTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Refresh-type option
                    {% set dynamicTablerefresh = desiredState.config.refresh_mode %}

                    ##Initialize option
                    {% set dynamicTableinitialize = desiredState.config.initialize %}

                    ## Node description
                    {%- if desiredState.node.description | length > 0 %} 
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Create Dynamic Work Table', true, "sql", "create") }}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        REFRESH_MODE   = {{dynamicTablerefresh}}
                        INITIALIZE = {{dynamicTableinitialize}}
                        {{ dynamicTableComment }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    AS
                    {% for source in desiredState.sources %}
                        SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}



                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}



                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}
                    



                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}



                    {%- if desiredState.node.description | length > 0 %} 
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}
                        {{ dynamicTableComment }}
                    
                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} REFRESH

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Dynamic Table Work
    version: 1
  StepType-2:
    id: "2"
    isDisabled: false
    metadata:
      defaultStorageLocation: DW
      error: null
      nodeMetadataSpec: |-
        capitalized: ML FORECAST 2
        short: ML_FCSTS
        tagColor: 'blue'
        plural: ML Forecasts

        config:

        - groupName: Forecast Model Input
          items:

            - type: toggleButton
              displayName: 'Multi-Series Forecast'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true

            - type: toggleButton
              displayName: 'Exogenous Variables'
              attributeName: 'exvar'
              isRequired: false
              default: 'true'
          
            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              enableIf: '{%- if not config.exvar %}true{%- else %}false{%- endif %}' 
              isRequired: false
              default: '30'

        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: "{{config.tgtcol}}"
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {{ stage('Create Forecast Table') }}


            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in source.columns  %}
                    "{{ col.name }}" 
                    {%- if col.name == config.tscol.name %} TIMESTAMP 
                    {%- elif col.name == config.tgtcol.name %} FLOAT 
                    {%- else %} {{ col.dataType }}
                    {%- endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


        run:
          templateString: |
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {{ stage('Truncate Forecast table') }}
            TRUNCATE IF EXISTS {{ this }}

            {{ stage('Populate Forecast Table with Historical Data') }}

            INSERT INTO {{ this }}
            (
                {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
            )
            SELECT 
                {% for col in source.columns  %} 
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            {{ source.join }}

            {{ stage('Create Forecast Model Instance') }}

            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )


            {{ stage('Insert Forecast data') }}
            BEGIN

            {% if config.exvar %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NULL
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' );

                UPDATE {{ this }} SRC
                SET 
                    {%- for col in columns if  col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}" = RES."{{ col.name }}" {%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES
                WHERE 
                    RES."TS" = SRC."{{ config.tscol.name }}"
                    {%- if config.multiseries  %}
                    AND RES."SERIES" = SRC."{{ config.seriescol.name }}"            
                    {%- endif %};

            {% else %}

                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }});

                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}NULL
                        {%- elif col.forecast or col.lower_bound or col.upper_bound %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            {% endif %}


            END
    name: CREATE AND RUN FORECAST
    version: 1
  StepType-4:
    id: "4"
    isDisabled: true
    metadata:
      defaultStorageLocation: DW
      error: null
      nodeMetadataSpec: |
        capitalized: Curtex_LLM_Sandbox
        short: Curtex_LLM_Sandbox
        tagColor: 'black'
        plural: Curtex_LLM_Sandbox

        config:
        - groupName: Translation Node Input
          items:
            - type: columnDropdownSelector
              displayName: 'Column to Translate'
              attributeName: 'translatecol'
              isRequired: true

            - type: dropdownSelector
              displayName: 'Source Language'
              attributeName: 'sourcelangcol'
              default: 'EN'
              options: 
                - 'EN'
                - 'ES'
                - 'FR'
                - 'DE'
                - 'IT'
                - 'JA'
                - 'KO'
                - 'PL'
                - 'PT'
                - 'RU'
                - 'SV'
              isRequired: true   

            - type: dropdownSelector
              displayName: 'Target Language'
              attributeName: 'tgtlangcol'
              default: 'ES'
              options:
                - 'EN'
                - 'ES' 
                - 'FR'
                - 'DE'
                - 'IT'
                - 'JA'
                - 'KO'
                - 'PL'
                - 'PT'
                - 'RU'
                - 'SV'
              isRequired: true

        systemColumns:
        - displayName: "Translation"
          attributeName: translation
          transform: ""
          dataType: varchar
          placement: end
          description: 'Generated by LLM Translate Function'
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'Translate_' ~ src_node.name %}

            {{ stage('Translate') }}


            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in source.columns  %}
                    "{{ col.name }}" 
                    {%- if col.name == config.translatecol.name %} varchar
                    {%- elif col.name == config.sourcelangcol.name %} varchar
                    {%- elif col.name == config.tgtlangcol.name %} varchar
                    {%- else %} {{ col.dataType }}
                    {%- endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


        run:
          templateString: |
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set translate_name = 'TRANSLATE_' ~ src_node.name %}

            {{ stage('Truncate Translate table') }}
            TRUNCATE TABLE IF EXISTS {{ this }}

            {{ stage('Populate Translate Table') }}

            INSERT INTO {{ this }}
            (
                {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
            )
            SELECT 
                {%- for col in source.columns  %} 
                    {% if col.name == 'Translation' %}          
                        snowflake.cortex.TRANSLATE({{ config.translatecol.name }},'{{ config.sourcelangcol}}','{{ config.tgtlangcol}}') AS "{{ col.name }}"
                    {% else %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                {{ source.join }}
    name: Curtex_LLM_Sandbox
    version: 1
  StepType-5:
    id: "5"
    isDisabled: false
    metadata:
      defaultStorageLocation: DW
      error: null
      nodeMetadataSpec: |-
        capitalized: Snowpark Stage
        short: PY
        plural: Snowpark stages
        tagColor: 'blue'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true
            enableIf: "false"

          - displayName: Write Mode
            attributeName: writeMode
            type: dropdownSelector
            default: overwrite
            options: 
            - overwrite
            - append
            enableIf: "true"

          - displayName: Python Libraries
            attributeName: pyLib
            type: textBox 
            syntax: sql
            isRequired: false   
            default: "import snowflake.snowpark as snowpark"

          - displayName: Dataframe Commands (df_raw -> df_final)
            attributeName: dfcmd
            type: textBox 
            syntax: sql
            isRequired: true    
            default: " \n
        df_filtered = df_raw.filter(\"C_ACCTBAL > 5000\")\n
        df_distinct = df_filtered.distinct()\n
        df_final = df_distinct.na.drop(subset=\"C_PHONE\")\n
        "

          - displayName: "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/latest/dataframe"
            attributeName: Info
            type: label
      templates:
        create:
          templateString: |
            {{ stage('Create Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {%- for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}



            {{ stage('Create Python Procedure ') }}
            {% set source = sources[0] %}

            CREATE OR REPLACE PROCEDURE {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}()
              returns string not null
              language python
              runtime_version = '3.8'
              packages = ('snowflake-snowpark-python', 'pandas') 
              handler = 'stage_py'
            as
            $$
            {{ config.pyLib }}

            def stage_py(snowpark_session):
              df_raw = snowpark_session.sql('''SELECT 
              {%- for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
              {%- endfor %} {{ source.join }} '''.rstrip())

            {%- set dfca = config.dfcmd.split('\n') %}
            {%- for dfc in dfca %}
              {{ dfc.lstrip() }}
            {%- endfor %}
              df_final.write.mode("{{config.writeMode}}").save_as_table('{{this}}')
              return str(df_raw.count()) + " rows input - " +  str(df_final.count()) + " rows output"
            $$
        run:
          templateString: |-
            {{ stage('Run Stored Procedure') }}
            CALL {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}()
    name: Snowpark Stage
    version: 1
  StepType-7:
    id: "7"
    isDisabled: false
    metadata:
      defaultStorageLocation: DW
      error: null
      nodeMetadataSpec: |-
        capitalized: FORECAST NODE
        short: FCSTS
        tagColor: 'purple'
        plural: Forecast Nodes


        config:

          - groupName: Forecast Model Input
            items:
              - type: dropdownSelector
                displayName: 'Model'
                attributeName: 'selected_forecast_model'
                isRequired: true
                options: 
                - "FORECAST_FCT_LINEITEM_ORDERS"
                - "FORECAST_ML_VIEW"

              - type: columnDropdownSelector
                displayName: 'Timestamp Column'
                attributeName: 'tscol'
                isRequired: true

              - type: columnDropdownSelector
                displayName: 'Value to Forecast'
                attributeName: 'tgtcol'
                isRequired: true

              - type: textBox 
                displayName: 'Periods To Forecast'
                attributeName: fcdays
                isRequired: true


        systemColumns:
          - displayName: "FORECAST"
            attributeName: forecast
            transform: ""
            dataType: FLOAT
            placement: end
            description: 'Generated by ML Forecast Model'
          - displayName: "LOWER_BOUND"
            attributeName: lower_bound
            transform: ""
            dataType: FLOAT
            placement: end
            description: 'Generated by ML Forecast Model'
          - displayName: "UPPER_BOUND"
            attributeName: upper_bound
            transform: ""
            dataType: FLOAT
            placement: end
            description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            -- {% if config.preSQL %}
            --     {{ stage('Pre-SQL') }}
            --     {{ config.preSQL }}
            -- {% endif %}


            {{ stage('Create Forecast Table') }}

            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in source.columns  %}
                    "{{ col.name }}" 
                    {%- if col.name == config.tscol.name %} TIMESTAMP 
                    {%- elif col.name == config.tgtcol.name %} FLOAT 
                    {%- else %} {{ col.dataType }}
                    {%- endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


        run:
          templateString: |-
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = config.selected_forecast_model%}

            {{ stage('Truncate Forecast table') }}
            TRUNCATE IF EXISTS {{ this }}

            {{ stage('Populate Forecast Table with Historical Data') }}

            INSERT INTO {{ this }}
            (
                "{{config.tgtcol.name}}",
                "{{config.tscol.name}}" ,
                "FORECAST",
                "LOWER_BOUND",
                "UPPER_BOUND"   
            )
            SELECT 
                sum({{config.tgtcol.name}}) as {{config.tgtcol.name}},
                "{{config.tscol.name}}" ,
                null as "FORECAST",
                null as "LOWER_BOUND",
                null as "UPPER_BOUND"
            {{ source.join }}
            group by {{config.tscol.name}}


            {{ stage('Insert Forecast data') }}
            BEGIN

                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(FORECASTING_PERIODS=>{{ config.fcdays }});
            INSERT INTO {{ this }}
                (
                    "{{config.tscol.name}}",
                    "FORECAST",
                    "LOWER_BOUND",
                    "UPPER_BOUND"
                )
                SELECT 
                    "TS",
                    "FORECAST",
                    "LOWER_BOUND",
                    "UPPER_BOUND"
                FROM TABLE(RESULT_SCAN(-1)) RES;

             END
    name: RUN FORECAST NODE
    version: 1
  StepType-9:
    id: "9"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dyanmic Table Stage
        short: DT
        tagColor: "#F6FF3C"
        isDisabled: true
        plural: Dynamic Tables

        deployStrategy: advanced

        config:
          - groupName: Dynamic Table Options
            items: 
            - displayName: Warehouse on which to execute Dynamic Table
              attributeName: warehouseName
              type: textBox
              default: dev_wh_xs
              isRequired: true

            - type: toggleButton
              attributeName: downstreamOption
              displayName: Downstream
              default: false
              isRequired: true

            - type: tabular
              displayName: 'Lag Specification'
              attributeName: lagSpecification
              columns:
          
              -  type: textBox
                 displayName: Time Value
                 attributeName: lagValue
                 default: 60
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Time Period
                 attributeName: lagPeriod
                 default: "Minutes"
                 options:
                 - Seconds
                 - Minutes
                 - Hours
                 - Days
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"

          - groupName: General Options
            items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false
              enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

            - type: toggleButton
              attributeName: groupByAll
              displayName: Group By All
              default: false
              enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"

            - type: multisourceToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false
      templates:
        create:
          templateString: |
            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources | count == desiredState.sources | count %}
                    {% set joinTest = currentState.join == desiredState.join %}

                    {# Test to see if the transform in a column has changed #}
                    {# Desired Namespace Variables Transform #}
                    {% set desiredTransformArray = desiredState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {# Test to see if the transform in a column has changed #}
                    {# Current Namespace Variables Transform #}
                    {% set currentTransformArray = currentState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {% set columnsTransformTest = currentTransformArray == desiredTransformArray %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Variables
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Test 
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
                    {% set groupByAllTest = currentState.config.groupByAll == desiredState.config.groupByAll %}
                    {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}

                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}


                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        joinTest == false or
                        columnsTransformTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        groupByAllTest == false or 
                        selectDistinctTest == false or 
                        nodeNameTest == false or 
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% else %}
                        {% set warehouseTest = currentdState.parameters.targetDynamicTableWarehouse == desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false or
                        nodeCommentTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Node description
                    {%- if desiredState.node.description | length > 0 %} 
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Create Dynamic Table', true, "sql", "create") }}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        {{ dynamicTableComment }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    AS
                    {% for source in desiredState.sources %}
                        SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}

                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }} REFRESH

                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}

                    {%- if desiredState.node.description | length > 0 %} 
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}
                        {{ dynamicTableComment }}

                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} REFRESH

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |+
            {{ stage('Nothing to do.') }}

            {%- set tst = sources[0].columns | map(attribute='transform') | list %}
            {%- set nsVariables = namespace(transformArray=[]) %}

            {% for s in sources %}
                {% for c in s.columns %}
                    {% set nsVariables.transformArray = nsVariables.transformArray +  [c.transform] -%}
                {% endfor %}
            {% endfor %}

            {{ nsVariables.transformArray }}


    name: Dynamic Table Stage
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs: {}
version: 2
